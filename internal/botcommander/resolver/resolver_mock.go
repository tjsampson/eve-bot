// Code generated by MockGen. DO NOT EDIT.
// Source: resolver.go

// Package mock_resolver is a generated GoMock package.
package resolver

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	commands "gitlab.unanet.io/devops/eve-bot/internal/botcommander/commands"
)

// MockResolver is a mock of Resolver interface
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// Resolve mocks base method
func (m *MockResolver) Resolve(input, channel, user string) commands.EvebotCommand {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", input, channel, user)
	ret0, _ := ret[0].(commands.EvebotCommand)
	return ret0
}

// Resolve indicates an expected call of Resolve
func (mr *MockResolverMockRecorder) Resolve(input, channel, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockResolver)(nil).Resolve), input, channel, user)
}
