// Code generated by MockGen. DO NOT EDIT.
// Source: Client.go

// Package mock_eveapi is a generated GoMock package.
package eveapi

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	params "github.com/unanet/eve-bot/internal/botcommander/params"
	eve "github.com/unanet/eve/pkg/eve"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Deploy mocks base method
func (m *MockClient) Deploy(ctx context.Context, dp eve.DeploymentPlanOptions, slackUser, slackChannel, ts string) (*eve.DeploymentPlanOptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deploy", ctx, dp, slackUser, slackChannel, ts)
	ret0, _ := ret[0].(*eve.DeploymentPlanOptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deploy indicates an expected call of Deploy
func (mr *MockClientMockRecorder) Deploy(ctx, dp, slackUser, slackChannel, ts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deploy", reflect.TypeOf((*MockClient)(nil).Deploy), ctx, dp, slackUser, slackChannel, ts)
}

// GetEnvironmentByID mocks base method
func (m *MockClient) GetEnvironmentByID(ctx context.Context, id string) (*eve.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironmentByID", ctx, id)
	ret0, _ := ret[0].(*eve.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironmentByID indicates an expected call of GetEnvironmentByID
func (mr *MockClientMockRecorder) GetEnvironmentByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentByID", reflect.TypeOf((*MockClient)(nil).GetEnvironmentByID), ctx, id)
}

// GetEnvironments mocks base method
func (m *MockClient) GetEnvironments(ctx context.Context) ([]eve.Environment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnvironments", ctx)
	ret0, _ := ret[0].([]eve.Environment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnvironments indicates an expected call of GetEnvironments
func (mr *MockClientMockRecorder) GetEnvironments(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironments", reflect.TypeOf((*MockClient)(nil).GetEnvironments), ctx)
}

// GetNamespacesByEnvironment mocks base method
func (m *MockClient) GetNamespacesByEnvironment(ctx context.Context, environmentName string) ([]eve.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacesByEnvironment", ctx, environmentName)
	ret0, _ := ret[0].([]eve.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespacesByEnvironment indicates an expected call of GetNamespacesByEnvironment
func (mr *MockClientMockRecorder) GetNamespacesByEnvironment(ctx, environmentName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacesByEnvironment", reflect.TypeOf((*MockClient)(nil).GetNamespacesByEnvironment), ctx, environmentName)
}

// GetServicesByNamespace mocks base method
func (m *MockClient) GetServicesByNamespace(ctx context.Context, namespace string) ([]eve.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByNamespace", ctx, namespace)
	ret0, _ := ret[0].([]eve.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServicesByNamespace indicates an expected call of GetServicesByNamespace
func (mr *MockClientMockRecorder) GetServicesByNamespace(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByNamespace", reflect.TypeOf((*MockClient)(nil).GetServicesByNamespace), ctx, namespace)
}

// GetServiceByName mocks base method
func (m *MockClient) GetServiceByName(ctx context.Context, namespace, service string) (eve.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByName", ctx, namespace, service)
	ret0, _ := ret[0].(eve.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByName indicates an expected call of GetServiceByName
func (mr *MockClientMockRecorder) GetServiceByName(ctx, namespace, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByName", reflect.TypeOf((*MockClient)(nil).GetServiceByName), ctx, namespace, service)
}

// GetServiceByID mocks base method
func (m *MockClient) GetServiceByID(ctx context.Context, id int) (eve.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", ctx, id)
	ret0, _ := ret[0].(eve.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServiceByID indicates an expected call of GetServiceByID
func (mr *MockClientMockRecorder) GetServiceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockClient)(nil).GetServiceByID), ctx, id)
}

// DeleteServiceMetadata mocks base method
func (m_2 *MockClient) DeleteServiceMetadata(ctx context.Context, m string, id int) (params.MetadataMap, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "DeleteServiceMetadata", ctx, m, id)
	ret0, _ := ret[0].(params.MetadataMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteServiceMetadata indicates an expected call of DeleteServiceMetadata
func (mr *MockClientMockRecorder) DeleteServiceMetadata(ctx, m, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServiceMetadata", reflect.TypeOf((*MockClient)(nil).DeleteServiceMetadata), ctx, m, id)
}

// SetServiceVersion mocks base method
func (m *MockClient) SetServiceVersion(ctx context.Context, version string, id int) (eve.Service, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetServiceVersion", ctx, version, id)
	ret0, _ := ret[0].(eve.Service)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetServiceVersion indicates an expected call of SetServiceVersion
func (mr *MockClientMockRecorder) SetServiceVersion(ctx, version, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetServiceVersion", reflect.TypeOf((*MockClient)(nil).SetServiceVersion), ctx, version, id)
}

// SetNamespaceVersion mocks base method
func (m *MockClient) SetNamespaceVersion(ctx context.Context, version string, id int) (eve.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNamespaceVersion", ctx, version, id)
	ret0, _ := ret[0].(eve.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNamespaceVersion indicates an expected call of SetNamespaceVersion
func (mr *MockClientMockRecorder) SetNamespaceVersion(ctx, version, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNamespaceVersion", reflect.TypeOf((*MockClient)(nil).SetNamespaceVersion), ctx, version, id)
}

// GetNamespaceByID mocks base method
func (m *MockClient) GetNamespaceByID(ctx context.Context, id int) (eve.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceByID", ctx, id)
	ret0, _ := ret[0].(eve.Namespace)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceByID indicates an expected call of GetNamespaceByID
func (mr *MockClientMockRecorder) GetNamespaceByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceByID", reflect.TypeOf((*MockClient)(nil).GetNamespaceByID), ctx, id)
}

// Release mocks base method
func (m *MockClient) Release(ctx context.Context, payload eve.Release) (eve.Release, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, payload)
	ret0, _ := ret[0].(eve.Release)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Release indicates an expected call of Release
func (mr *MockClientMockRecorder) Release(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockClient)(nil).Release), ctx, payload)
}

// GetMetadata mocks base method
func (m *MockClient) GetMetadata(ctx context.Context, key string) (eve.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", ctx, key)
	ret0, _ := ret[0].(eve.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata
func (mr *MockClientMockRecorder) GetMetadata(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockClient)(nil).GetMetadata), ctx, key)
}

// UpsertMergeMetadata mocks base method
func (m *MockClient) UpsertMergeMetadata(arg0 context.Context, arg1 eve.Metadata) (eve.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMergeMetadata", arg0, arg1)
	ret0, _ := ret[0].(eve.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMergeMetadata indicates an expected call of UpsertMergeMetadata
func (mr *MockClientMockRecorder) UpsertMergeMetadata(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMergeMetadata", reflect.TypeOf((*MockClient)(nil).UpsertMergeMetadata), arg0, arg1)
}

// UpsertMetadataServiceMap mocks base method
func (m *MockClient) UpsertMetadataServiceMap(arg0 context.Context, arg1 eve.MetadataServiceMap) (eve.MetadataServiceMap, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertMetadataServiceMap", arg0, arg1)
	ret0, _ := ret[0].(eve.MetadataServiceMap)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertMetadataServiceMap indicates an expected call of UpsertMetadataServiceMap
func (mr *MockClientMockRecorder) UpsertMetadataServiceMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertMetadataServiceMap", reflect.TypeOf((*MockClient)(nil).UpsertMetadataServiceMap), arg0, arg1)
}

// DeleteMetadataKey mocks base method
func (m *MockClient) DeleteMetadataKey(ctx context.Context, id int, key string) (eve.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMetadataKey", ctx, id, key)
	ret0, _ := ret[0].(eve.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteMetadataKey indicates an expected call of DeleteMetadataKey
func (mr *MockClientMockRecorder) DeleteMetadataKey(ctx, id, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMetadataKey", reflect.TypeOf((*MockClient)(nil).DeleteMetadataKey), ctx, id, key)
}

// GetNamespaceJobs mocks base method
func (m *MockClient) GetNamespaceJobs(ctx context.Context, ns *eve.Namespace) ([]eve.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceJobs", ctx, ns)
	ret0, _ := ret[0].([]eve.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNamespaceJobs indicates an expected call of GetNamespaceJobs
func (mr *MockClientMockRecorder) GetNamespaceJobs(ctx, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceJobs", reflect.TypeOf((*MockClient)(nil).GetNamespaceJobs), ctx, ns)
}
